% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kernel.R
\name{Kernel}
\alias{Kernel}
\title{The Kernel Class}
\description{
An object of this class handles the low-level communication with
  the Jupyter frontend or kernel manager. There should only be one object of this
  class in existence.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{r_session}}{See \code{\link{RKernelSession}}.}

\item{\code{r_repl}}{An RSessionAdapter for handling input and output}

\item{\code{DAPServer}}{The current DAP server}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Kernel-new}{\code{Kernel$new()}}
\item \href{#method-Kernel-start_r_session}{\code{Kernel$start_r_session()}}
\item \href{#method-Kernel-start}{\code{Kernel$start()}}
\item \href{#method-Kernel-run}{\code{Kernel$run()}}
\item \href{#method-Kernel-poll_and_respond}{\code{Kernel$poll_and_respond()}}
\item \href{#method-Kernel-clear_output}{\code{Kernel$clear_output()}}
\item \href{#method-Kernel-stream}{\code{Kernel$stream()}}
\item \href{#method-Kernel-stdout}{\code{Kernel$stdout()}}
\item \href{#method-Kernel-stderr}{\code{Kernel$stderr()}}
\item \href{#method-Kernel-execute_result}{\code{Kernel$execute_result()}}
\item \href{#method-Kernel-display_send}{\code{Kernel$display_send()}}
\item \href{#method-Kernel-send_error}{\code{Kernel$send_error()}}
\item \href{#method-Kernel-send_comm}{\code{Kernel$send_comm()}}
\item \href{#method-Kernel-get_parent}{\code{Kernel$get_parent()}}
\item \href{#method-Kernel-get_conn_info}{\code{Kernel$get_conn_info()}}
\item \href{#method-Kernel-is_child}{\code{Kernel$is_child()}}
\item \href{#method-Kernel-input_request}{\code{Kernel$input_request()}}
\item \href{#method-Kernel-read_stdin}{\code{Kernel$read_stdin()}}
\item \href{#method-Kernel-send_debug_event}{\code{Kernel$send_debug_event()}}
\item \href{#method-Kernel-handle_r_msg}{\code{Kernel$handle_r_msg()}}
\item \href{#method-Kernel-clone}{\code{Kernel$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-new"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-new}{}}}
\subsection{Method \code{new()}}{
Initialize the kernel
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$new(conn_info)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{conn_info}}{A list with the connection info from the front-end}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-start_r_session"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-start_r_session}{}}}
\subsection{Method \code{start_r_session()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$start_r_session()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-start"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-start}{}}}
\subsection{Method \code{start()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$start()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-run"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-run}{}}}
\subsection{Method \code{run()}}{
Run the kernel.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$run()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-poll_and_respond"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-poll_and_respond}{}}}
\subsection{Method \code{poll_and_respond()}}{
A single iteration of the kernel loop
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$poll_and_respond(poll_timeout = getOption("rkernel_poll_timeout", 10L))}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-clear_output"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-clear_output}{}}}
\subsection{Method \code{clear_output()}}{
Clear the current output cell in the frontend.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$clear_output(wait)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait}}{Logical value, whether to wait until output is cleared.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-stream"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-stream}{}}}
\subsection{Method \code{stream()}}{
Stream text to the frontend.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$stream(text, stream)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{Text to be sent to the frontend}

\item{\code{stream}}{A string to select the stream -- either "stout" or "stderr"}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-stdout"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-stdout}{}}}
\subsection{Method \code{stdout()}}{
Stream text to the frontend via 'stdout' stream.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$stdout(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{Text to be sent to the frontend}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-stderr"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-stderr}{}}}
\subsection{Method \code{stderr()}}{
Stream text to the frontend via 'stderr' stream.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$stderr(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{Text to be sent to the frontend}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-execute_result"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-execute_result}{}}}
\subsection{Method \code{execute_result()}}{
Send execution results to the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$execute_result(data, metadata = emptyNamedList)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{Execution result in rich format}

\item{\code{metadata}}{A list with metadata}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-display_send"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-display_send}{}}}
\subsection{Method \code{display_send()}}{
Send rich format data to the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$display_send(msg)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg}}{A list with the appropriate structure. [TODO]}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-send_error"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-send_error}{}}}
\subsection{Method \code{send_error()}}{
Send an error message and traceback to the frontend.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$send_error(name, value, traceback)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{A string, the error name.}

\item{\code{value}}{A string, the value of the error message.}

\item{\code{traceback}}{A character vector with the traceback.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-send_comm"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-send_comm}{}}}
\subsection{Method \code{send_comm()}}{
Send a message via a comm.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$send_comm(msg)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg}}{A list containing a comm message.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-get_parent"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-get_parent}{}}}
\subsection{Method \code{get_parent()}}{
The parent of the message currently sent.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$get_parent(channel = "shell")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{channel}}{A string, the relevant input channel.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-get_conn_info"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-get_conn_info}{}}}
\subsection{Method \code{get_conn_info()}}{
Return the current connection info.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$get_conn_info()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-is_child"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-is_child}{}}}
\subsection{Method \code{is_child()}}{
Check if the current process is a fork from the original kernel process
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$is_child()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-input_request"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-input_request}{}}}
\subsection{Method \code{input_request()}}{
Send an input request to the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$input_request(prompt = "", password = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{prompt}}{A prompt string}

\item{\code{password}}{Logical value; whether the input should be hidden like in a
password dialog}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-read_stdin"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-read_stdin}{}}}
\subsection{Method \code{read_stdin()}}{
Read a line from the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$read_stdin()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-send_debug_event"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-send_debug_event}{}}}
\subsection{Method \code{send_debug_event()}}{
Send a debug event to the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$send_debug_event(content)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content}}{A list, content provided by the debug adapter}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-handle_r_msg"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-handle_r_msg}{}}}
\subsection{Method \code{handle_r_msg()}}{
Handle a generic message sent from the R Session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$handle_r_msg(msg)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg}}{The message, a list}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Kernel-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Kernel-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Kernel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
