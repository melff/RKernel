% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/session.R
\name{RSessionAdapter}
\alias{RSessionAdapter}
\title{A Rich R Session Interface}
\description{
Objects from this class handle the "higher-level" interaction 
between the frontend and the R session. There can be more such 
interfaces to a session. For example, for the main REPL 
and for a REPL created by a call to browser().
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{session}}{An RKernelSession object or `NULL`}

\item{\code{prompt}}{The R console prompt or NULL}

\item{\code{browse_prompt}}{The prompt created by a call to `browser()`}

\item{\code{io_timeout}}{An integer number a timeout in microseconds}

\item{\code{stdout}}{Accumulated output via the stdout channel.}

\item{\code{stderr}}{Accumulated output via the stderr channel.}

\item{\code{stdout_callback}}{A function to be called with stdout text or NULL}

\item{\code{stderr_callback}}{A function to be called with stderr text or NULL}

\item{\code{browser_callback}}{A function to be called when a browser prompt
is encountered or NULL}

\item{\code{prompt_callback}}{A function to be called when a command prompt
is encountered or NULL}

\item{\code{input_callback}}{A function to be called when input is required
or NULL}

\item{\code{echo}}{A logical value, if TRUE code sent to the R process will
be echoed}

\item{\code{found_prompt}}{A logical value, whether a prompt has been found
in the output of the R process}

\item{\code{found_browse_prompt}}{The latest instance of the browser prompt
pattern found in the R process output}

\item{\code{errored}}{A logical value, whether an error occurred in the R
session}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RSessionAdapter-aggreg_stdout}{\code{RSessionAdapter$aggreg_stdout()}}
\item \href{#method-RSessionAdapter-aggreg_stderr}{\code{RSessionAdapter$aggreg_stderr()}}
\item \href{#method-RSessionAdapter-collect}{\code{RSessionAdapter$collect()}}
\item \href{#method-RSessionAdapter-new}{\code{RSessionAdapter$new()}}
\item \href{#method-RSessionAdapter-run_code}{\code{RSessionAdapter$run_code()}}
\item \href{#method-RSessionAdapter-interrupt}{\code{RSessionAdapter$interrupt()}}
\item \href{#method-RSessionAdapter-process_output}{\code{RSessionAdapter$process_output()}}
\item \href{#method-RSessionAdapter-run_cmd}{\code{RSessionAdapter$run_cmd()}}
\item \href{#method-RSessionAdapter-getOption}{\code{RSessionAdapter$getOption()}}
\item \href{#method-RSessionAdapter-eval}{\code{RSessionAdapter$eval()}}
\item \href{#method-RSessionAdapter-eval_code}{\code{RSessionAdapter$eval_code()}}
\item \href{#method-RSessionAdapter-ls}{\code{RSessionAdapter$ls()}}
\item \href{#method-RSessionAdapter-get}{\code{RSessionAdapter$get()}}
\item \href{#method-RSessionAdapter-assign}{\code{RSessionAdapter$assign()}}
\item \href{#method-RSessionAdapter-setOption}{\code{RSessionAdapter$setOption()}}
\item \href{#method-RSessionAdapter-importOption}{\code{RSessionAdapter$importOption()}}
\item \href{#method-RSessionAdapter-handle_BEL}{\code{RSessionAdapter$handle_BEL()}}
\item \href{#method-RSessionAdapter-handle_readline}{\code{RSessionAdapter$handle_readline()}}
\item \href{#method-RSessionAdapter-handle_scan}{\code{RSessionAdapter$handle_scan()}}
\item \href{#method-RSessionAdapter-clone}{\code{RSessionAdapter$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-aggreg_stdout"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-aggreg_stdout}{}}}
\subsection{Method \code{aggreg_stdout()}}{
A potential "stdout_callback" function that aggregates
   output sent from the R process via "stdout" channel to the 
   eponymous "stdout" field
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$aggreg_stdout(txt, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{txt}}{A character string}

\item{\code{...}}{Other arguments, ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-aggreg_stderr"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-aggreg_stderr}{}}}
\subsection{Method \code{aggreg_stderr()}}{
A potential "stderr_callback" function that aggregates
   output sent from the R process via "stderr" channel to the 
   eponymous "stderr" field
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$aggreg_stderr(txt, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{txt}}{A character string}

\item{\code{...}}{Other arguments, ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-collect"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-collect}{}}}
\subsection{Method \code{collect()}}{
Collect the accumulated output from fields "stdout" and
   "stderr" into a list with two elements named "stdout" and "stderr".
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$collect(clear = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{clear}}{A logical value, whether accumulated output should be
cleared after being returned.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-new"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-new}{}}}
\subsection{Method \code{new()}}{
Initialize an object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$new(
  session,
  stdout_callback = self$aggreg_stdout,
  stderr_callback = self$aggreg_stderr,
  browser_callback = NULL,
  prompt_callback = NULL,
  input_callback = NULL,
  prompt = "> ",
  echo = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{session}}{An object from class "RKernelSession"}

\item{\code{stdout_callback}}{A callback function for "stdout" output}

\item{\code{stderr_callback}}{A callback function for "stderr" output}

\item{\code{browser_callback}}{A callback function for browser prompts (optional)}

\item{\code{prompt_callback}}{A callback function for command prompts encountered}

\item{\code{input_callback}}{A callback function for input requests (optional)}

\item{\code{prompt}}{A character string, the expected command prompt}

\item{\code{echo}}{A logical value, whether to echo input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-run_code"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-run_code}{}}}
\subsection{Method \code{run_code()}}{
Run code and pass output to callback functions
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$run_code(
  code,
  io_timeout = 1,
  stdout_callback = self$stdout_callback,
  stderr_callback = self$stderr_callback,
  browser_callback = self$browser_callback,
  prompt_callback = self$prompt_callback,
  input_callback = self$input_callback,
  until_prompt = TRUE,
  echo = self$echo
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{A character string or character vector with code lines}

\item{\code{io_timeout}}{An integer value, the timeout of waiting for output}

\item{\code{stdout_callback}}{A callback function for "stdout" output}

\item{\code{stderr_callback}}{A callback function for "stderr" output}

\item{\code{browser_callback}}{A callback function for browser prompts (optional)}

\item{\code{prompt_callback}}{A callback function for command prompts encountered}

\item{\code{input_callback}}{A callback function for input requests (optional)}

\item{\code{until_prompt}}{A logical value, whether process and wait output
until a command prompt is encountered.}

\item{\code{echo}}{A logical value, whether to echo input}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-interrupt"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-interrupt}{}}}
\subsection{Method \code{interrupt()}}{
Send an interrupt signal (SIGINT) to the R process. This
   should stop what the R process is doing without killing it.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$interrupt()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-process_output"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-process_output}{}}}
\subsection{Method \code{process_output()}}{
Process output created by commands sent to the R process
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$process_output(
  io_timeout = 1,
  stdout_callback = self$stdout_callback,
  stderr_callback = self$stderr_callback,
  browser_callback = self$browser_callback,
  input_callback = self$input_callback,
  prompt_callback = self$prompt_callback,
  until_prompt = TRUE,
  drop_echo = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{io_timeout}}{An integer value, the timeout of waiting for output}

\item{\code{stdout_callback}}{A callback function for "stdout" output}

\item{\code{stderr_callback}}{A callback function for "stderr" output}

\item{\code{browser_callback}}{A callback function for browser prompts (optional)}

\item{\code{input_callback}}{A callback function for input requests (optional)}

\item{\code{prompt_callback}}{A callback function for command prompts encountered}

\item{\code{until_prompt}}{A logical value, whether process and wait output
until a command prompt is encountered.}

\item{\code{drop_echo}}{A logical value, whether input echo be dropped}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-run_cmd"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-run_cmd}{}}}
\subsection{Method \code{run_cmd()}}{
Run a one-line command without checking and return the 
    output
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$run_cmd(cmd)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{cmd}}{A command string}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-getOption"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-getOption}{}}}
\subsection{Method \code{getOption()}}{
Get an option value from the R session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$getOption(n, default = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{A character string, the name of the requested option value}

\item{\code{default}}{A default value}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-eval"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-eval}{}}}
\subsection{Method \code{eval()}}{
Evaluate an expression in the R session and return the
   result.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$eval(expr, safe = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{expr}}{An expression}

\item{\code{safe}}{A logical value, whether errors should be caught}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-eval_code"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-eval_code}{}}}
\subsection{Method \code{eval_code()}}{
Evaluate some code in the R session and return the
   result.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$eval_code(code, safe = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{A character string of code}

\item{\code{safe}}{A logical value, whether errors should be caught}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-ls"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-ls}{}}}
\subsection{Method \code{ls()}}{
Run `ls()` in the R session and return the result.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$ls()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-get"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-get}{}}}
\subsection{Method \code{get()}}{
Get the value of a variable (named object) from the
   R session and return it.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$get(n)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{The name of the variable}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-assign"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-assign}{}}}
\subsection{Method \code{assign()}}{
Assign a value to a variable in the R session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$assign(n, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{A variable name}

\item{\code{value}}{The value that is assigned to the variable}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-setOption"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-setOption}{}}}
\subsection{Method \code{setOption()}}{
Set an option in the R session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$setOption(n, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{The name of the option}

\item{\code{value}}{The intended option value}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-importOption"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-importOption}{}}}
\subsection{Method \code{importOption()}}{
Import an option value from the R session to the 
   kernel
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$importOption(n)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{The option value}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-handle_BEL"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-handle_BEL}{}}}
\subsection{Method \code{handle_BEL()}}{
Handle special output from the R session that starts 
   with BEL
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$handle_BEL(
  txt,
  input_callback,
  stdout_callback,
  stderr_callback
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{txt}}{Output string containing BEL}

\item{\code{input_callback}}{A function to request input from the frontend}

\item{\code{stdout_callback}}{A function to process output obtained from the
R session via "stdout" channel}

\item{\code{stderr_callback}}{A function to process output obtained from the
R session via "stderr" channel}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-handle_readline"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-handle_readline}{}}}
\subsection{Method \code{handle_readline()}}{
Handle special an input request obtained from the 
   R session via output indicated with a special output string
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$handle_readline(
  txt,
  input_callback,
  stdout_callback,
  stderr_callback
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{txt}}{Output string containing a special readline prompt}

\item{\code{input_callback}}{A function to request input from the frontend}

\item{\code{stdout_callback}}{A function to process output obtained from the
R session via "stdout" channel}

\item{\code{stderr_callback}}{A function to process output obtained from the
R session via "stderr" channel}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-handle_scan"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-handle_scan}{}}}
\subsection{Method \code{handle_scan()}}{
Handle input request created by the function `scan` the 
   in the R session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$handle_scan(
  txt,
  input_callback,
  stdout_callback,
  stderr_callback
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{txt}}{Output string containing a special readline prompt}

\item{\code{input_callback}}{A function to request input from the frontend}

\item{\code{stdout_callback}}{A function to process output obtained from the
R session via "stdout" channel}

\item{\code{stderr_callback}}{A function to process output obtained from the
R session via "stderr" channel}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionAdapter-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionAdapter-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionAdapter$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
