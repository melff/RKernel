% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/comms.R
\name{CommManager}
\alias{CommManager}
\alias{CommManagerClass}
\title{A Manager for Comms}
\usage{
CommManager(...)
}
\arguments{
\item{...}{Arguments passed to the inializer}
}
\description{
Objects of this class are used internally to manage comms, they
    are not meant to be used by end-users.
}
\details{
See the documentation 
  of \href{https://jupyter-client.readthedocs.io/en/latest/messaging.html#custom-messages}{Jupyter custom messages}.
}
\section{Functions}{
\itemize{
\item \code{CommManager()}: A constructor for objects in the 'CommManagerClass'

}}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{comms}}{A list of Comms.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CommManager-add_handlers}{\code{CommManagerClass$add_handlers()}}
\item \href{#method-CommManager-remove_handlers}{\code{CommManagerClass$remove_handlers()}}
\item \href{#method-CommManager-has_handlers}{\code{CommManagerClass$has_handlers()}}
\item \href{#method-CommManager-get_handlers}{\code{CommManagerClass$get_handlers()}}
\item \href{#method-CommManager-get_comms}{\code{CommManagerClass$get_comms()}}
\item \href{#method-CommManager-new_comm}{\code{CommManagerClass$new_comm()}}
\item \href{#method-CommManager-handle_open}{\code{CommManagerClass$handle_open()}}
\item \href{#method-CommManager-handle_close}{\code{CommManagerClass$handle_close()}}
\item \href{#method-CommManager-handle_msg}{\code{CommManagerClass$handle_msg()}}
\item \href{#method-CommManager-has}{\code{CommManagerClass$has()}}
\item \href{#method-CommManager-send}{\code{CommManagerClass$send()}}
\item \href{#method-CommManager-send_open}{\code{CommManagerClass$send_open()}}
\item \href{#method-CommManager-send_close}{\code{CommManagerClass$send_close()}}
\item \href{#method-CommManager-list_targets}{\code{CommManagerClass$list_targets()}}
\item \href{#method-CommManager-clone}{\code{CommManagerClass$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-add_handlers"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-add_handlers}{}}}
\subsection{Method \code{add_handlers()}}{
Add a handler for a comm target
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$add_handlers(target_name, handlers)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_name}}{A string, the name of the target.}

\item{\code{handlers}}{A named list of handlers}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-remove_handlers"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-remove_handlers}{}}}
\subsection{Method \code{remove_handlers()}}{
Remove the handlers of a comm target
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$remove_handlers(target_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_name}}{A string, the name of the target}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-has_handlers"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-has_handlers}{}}}
\subsection{Method \code{has_handlers()}}{
Check if handlers for a target exist
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$has_handlers(target_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_name}}{A string, the name of the target}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-get_handlers"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-get_handlers}{}}}
\subsection{Method \code{get_handlers()}}{
Get the handlers for a target
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$get_handlers(target_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_name}}{A string, the name of the target}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-get_comms"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-get_comms}{}}}
\subsection{Method \code{get_comms()}}{
Get all comms or all comms related to a target
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$get_comms(target_name = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_name}}{A string, the name of the target or NULL. If NULL,}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-new_comm"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-new_comm}{}}}
\subsection{Method \code{new_comm()}}{
Create a new comm related to a target
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$new_comm(target_name)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_name}}{A string, the name of the target}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-handle_open"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-handle_open}{}}}
\subsection{Method \code{handle_open()}}{
Handle a 'comm open' request from the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$handle_open(target_name, id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{target_name}}{A string, the name of the target}

\item{\code{id}}{A string, the comm id}

\item{\code{data}}{Data sent by the frontend}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-handle_close"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-handle_close}{}}}
\subsection{Method \code{handle_close()}}{
Handle a 'comm close' request from the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$handle_close(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A string, the comm id}

\item{\code{data}}{Data sent by the frontend}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-handle_msg"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-handle_msg}{}}}
\subsection{Method \code{handle_msg()}}{
Handle a comm message from the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$handle_msg(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A string, the comm id}

\item{\code{data}}{Data sent by the frontend}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-has"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-has}{}}}
\subsection{Method \code{has()}}{
Check whether the comm manager has info 
about comm with an id
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$has(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A string, possibly a comm id}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-send"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-send}{}}}
\subsection{Method \code{send()}}{
Send data to the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$send(id, data, metadata = emptyNamedList, buffers = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A string, the comm id}

\item{\code{data}}{A named list}

\item{\code{metadata}}{A named list}

\item{\code{buffers}}{A list of raw vectors or NULL}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-send_open"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-send_open}{}}}
\subsection{Method \code{send_open()}}{
Send an 'open' request to the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$send_open(
  id,
  target_name,
  data,
  metadata = emptyNamedList,
  buffers = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A string, the comm id}

\item{\code{target_name}}{A string, the name of the target}

\item{\code{data}}{A named list}

\item{\code{metadata}}{A named list}

\item{\code{buffers}}{A list of raw vectors or NULL}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-send_close"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-send_close}{}}}
\subsection{Method \code{send_close()}}{
Send an 'close' request to the frontend
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$send_close(
  id,
  data = emptyNamedList,
  metadata = emptyNamedList,
  buffers = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{A string, the comm id}

\item{\code{data}}{A named list}

\item{\code{metadata}}{A named list}

\item{\code{buffers}}{A list of raw vectors or NULL}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-list_targets"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-list_targets}{}}}
\subsection{Method \code{list_targets()}}{
Return a list of targets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$list_targets()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CommManager-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CommManager-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CommManagerClass$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
