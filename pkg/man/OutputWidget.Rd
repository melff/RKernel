% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/widget-output.R
\name{OutputWidget}
\alias{OutputWidget}
\alias{OutputWidgetClass}
\alias{with.OutputWidget}
\title{Widgets to receive output}
\usage{
OutputWidget(append_output = FALSE, ...)

\method{with}{OutputWidget}(data, expr, envir = list(), enclos = parent.frame(), clear = TRUE, ...)
}
\arguments{
\item{append_output}{Logical value, whether new output is appended to existing
output in the widget or the output is overwritten}

\item{...}{Other arguments, ignored.}

\item{data}{An "OutputWidget" object}

\item{expr}{An expression to evaluate, or a sequence of expression, 
encapsulated by curly braces.}

\item{envir}{An environment or a list within which `expr` is evaluated.}

\item{enclos}{An enclosing environment.}

\item{clear}{A logical value, whether clear the output before evaluating
`expr`}
}
\description{
Classes and constructors to wrap output created by code
}
\section{Super classes}{
\code{\link[RKernel:HasTraits]{RKernel::HasTraits}} -> \code{\link[RKernel:Widget]{RKernel::Widget}} -> \code{\link[RKernel:DOMWidget]{RKernel::DOMWidget}} -> \code{OutputWidget}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{_view_name}}{Name of the Javascript model view in the frontend}

\item{\code{_model_name}}{Name of the Javascript model in the frontend}

\item{\code{_view_module}}{Name of the module where the view is defined}

\item{\code{_model_module}}{Name of the Javascript module with the model}

\item{\code{_view_module_version}}{Version of the module where the view is defined}

\item{\code{_model_module_version}}{Version of the module where the model is defined}

\item{\code{msg_id}}{Unicode string with the id of the last message sent to the frontend.}

\item{\code{outputs}}{A list with output strings}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-OutputWidget-new}{\code{OutputWidgetClass$new()}}
\item \href{#method-OutputWidget-display}{\code{OutputWidgetClass$display()}}
\item \href{#method-OutputWidget-clear}{\code{OutputWidgetClass$clear()}}
\item \href{#method-OutputWidget-stdout}{\code{OutputWidgetClass$stdout()}}
\item \href{#method-OutputWidget-stderr}{\code{OutputWidgetClass$stderr()}}
\item \href{#method-OutputWidget-handle_msg}{\code{OutputWidgetClass$handle_msg()}}
\item \href{#method-OutputWidget-clone}{\code{OutputWidgetClass$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="HasTraits" data-id="notify"><a href='../../RKernel/html/HasTraits.html#method-HasTraits-notify'><code>RKernel::HasTraits$notify()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="HasTraits" data-id="observe"><a href='../../RKernel/html/HasTraits.html#method-HasTraits-observe'><code>RKernel::HasTraits$observe()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="HasTraits" data-id="validate"><a href='../../RKernel/html/HasTraits.html#method-HasTraits-validate'><code>RKernel::HasTraits$validate()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="_send"><a href='../../RKernel/html/Widget.html#method-Widget-_send'><code>RKernel::Widget$_send()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="check_version"><a href='../../RKernel/html/Widget.html#method-Widget-check_version'><code>RKernel::Widget$check_version()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="close"><a href='../../RKernel/html/Widget.html#method-Widget-close'><code>RKernel::Widget$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="display_data"><a href='../../RKernel/html/Widget.html#method-Widget-display_data'><code>RKernel::Widget$display_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="finalize"><a href='../../RKernel/html/Widget.html#method-Widget-finalize'><code>RKernel::Widget$finalize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="get_state"><a href='../../RKernel/html/Widget.html#method-Widget-get_state'><code>RKernel::Widget$get_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="handle_buffers"><a href='../../RKernel/html/Widget.html#method-Widget-handle_buffers'><code>RKernel::Widget$handle_buffers()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="handle_comm_msg"><a href='../../RKernel/html/Widget.html#method-Widget-handle_comm_msg'><code>RKernel::Widget$handle_comm_msg()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="handle_comm_opened"><a href='../../RKernel/html/Widget.html#method-Widget-handle_comm_opened'><code>RKernel::Widget$handle_comm_opened()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="handle_custom_msg"><a href='../../RKernel/html/Widget.html#method-Widget-handle_custom_msg'><code>RKernel::Widget$handle_custom_msg()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="handle_displayed"><a href='../../RKernel/html/Widget.html#method-Widget-handle_displayed'><code>RKernel::Widget$handle_displayed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="handle_event"><a href='../../RKernel/html/Widget.html#method-Widget-handle_event'><code>RKernel::Widget$handle_event()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="on_displayed"><a href='../../RKernel/html/Widget.html#method-Widget-on_displayed'><code>RKernel::Widget$on_displayed()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="on_event"><a href='../../RKernel/html/Widget.html#method-Widget-on_event'><code>RKernel::Widget$on_event()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="on_msg"><a href='../../RKernel/html/Widget.html#method-Widget-on_msg'><code>RKernel::Widget$on_msg()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="open"><a href='../../RKernel/html/Widget.html#method-Widget-open'><code>RKernel::Widget$open()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="send"><a href='../../RKernel/html/Widget.html#method-Widget-send'><code>RKernel::Widget$send()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="send_state"><a href='../../RKernel/html/Widget.html#method-Widget-send_state'><code>RKernel::Widget$send_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Widget" data-id="set_state"><a href='../../RKernel/html/Widget.html#method-Widget-set_state'><code>RKernel::Widget$set_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="DOMWidget" data-id="add_class"><a href='../../RKernel/html/DOMWidget.html#method-DOMWidget-add_class'><code>RKernel::DOMWidget$add_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="DOMWidget" data-id="has_class"><a href='../../RKernel/html/DOMWidget.html#method-DOMWidget-has_class'><code>RKernel::DOMWidget$has_class()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="DOMWidget" data-id="remove_class"><a href='../../RKernel/html/DOMWidget.html#method-DOMWidget-remove_class'><code>RKernel::DOMWidget$remove_class()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OutputWidget-new"></a>}}
\if{latex}{\out{\hypertarget{method-OutputWidget-new}{}}}
\subsection{Method \code{new()}}{
Initializing function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OutputWidgetClass$new(append_output = TRUE, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{append_output}}{Logical, whether existing output should be appended to or overwritten.}

\item{\code{...}}{Any other arguments, passed to the superclass initializer.}

\item{\code{envir}}{An environment, where expressions are evaluated.}

\item{\code{use_display}}{Logical, whether the display mechanism is used internally for 
output streams.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OutputWidget-display"></a>}}
\if{latex}{\out{\hypertarget{method-OutputWidget-display}{}}}
\subsection{Method \code{display()}}{
A variant of \code{\link{display}} for output within a display widget.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OutputWidgetClass$display(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Arguments passed to the function \code{\link{display_data}}.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OutputWidget-clear"></a>}}
\if{latex}{\out{\hypertarget{method-OutputWidget-clear}{}}}
\subsection{Method \code{clear()}}{
Clear the output
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OutputWidgetClass$clear(wait = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{wait}}{Logical, whether to wait for the frontend to clear
the output.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OutputWidget-stdout"></a>}}
\if{latex}{\out{\hypertarget{method-OutputWidget-stdout}{}}}
\subsection{Method \code{stdout()}}{
Handle output via stdout stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OutputWidgetClass$stdout(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{A character string being output}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OutputWidget-stderr"></a>}}
\if{latex}{\out{\hypertarget{method-OutputWidget-stderr}{}}}
\subsection{Method \code{stderr()}}{
Handle output via stderr stream
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OutputWidgetClass$stderr(text)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{A character string being output}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OutputWidget-handle_msg"></a>}}
\if{latex}{\out{\hypertarget{method-OutputWidget-handle_msg}{}}}
\subsection{Method \code{handle_msg()}}{
Handle a (JSON) message sent to the output
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OutputWidgetClass$handle_msg(msg)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{msg}}{The message, a list}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-OutputWidget-clone"></a>}}
\if{latex}{\out{\hypertarget{method-OutputWidget-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{OutputWidgetClass$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
