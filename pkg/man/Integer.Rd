% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/traitlets-numbers.R
\name{Integer}
\alias{Integer}
\alias{IntegerClass}
\alias{as.integer.Integer}
\alias{as.numeric.Integer}
\alias{to_json.Integer}
\title{Integer Traitlets}
\usage{
Integer(...)

\method{as.integer}{Integer}(x, ...)

\method{as.numeric}{Integer}(x, ...)

\method{to_json}{Integer}(x, ...)
}
\arguments{
\item{...}{Other arguments.}

\item{x}{An integer traitlet.}
}
\description{
A class and a constructor function to create integer vector trait(let)s.
}
\section{Super class}{
\code{\link[RKernel:Trait]{RKernel::Trait}} -> \code{Integer}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{value}}{An integer vector.}

\item{\code{optional}}{Logical value, whether a length-zero value is allowed.}

\item{\code{coerce}}{Logical value, whether assignments to the value field should
be coerced to the appropriate type.}

\item{\code{length}}{Integer number, the length the value should have.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Integer-validator}{\code{IntegerClass$validator()}}
\item \href{#method-Integer-new}{\code{IntegerClass$new()}}
\item \href{#method-Integer-clone}{\code{IntegerClass$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Trait" data-id="get"><a href='../../RKernel/html/Trait.html#method-Trait-get'><code>RKernel::Trait$get()</code></a></span></li>
<li><span class="pkg-link" data-pkg="RKernel" data-topic="Trait" data-id="set"><a href='../../RKernel/html/Trait.html#method-Trait-set'><code>RKernel::Trait$set()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Integer-validator"></a>}}
\if{latex}{\out{\hypertarget{method-Integer-validator}{}}}
\subsection{Method \code{validator()}}{
Check the value assigned to the traitlet.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerClass$validator(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{The value assigned to the traitlet.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Integer-new"></a>}}
\if{latex}{\out{\hypertarget{method-Integer-new}{}}}
\subsection{Method \code{new()}}{
Initialize the traitlet.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerClass$new(
  initial = integer(0),
  coerce = TRUE,
  optional = length(initial) == 0,
  length = 1L
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{initial}}{An integer vector, the initial value for the traitlet.}

\item{\code{coerce}}{coerce Logical value, whether assignments to the value field should
be coerced to the appropriate type.}

\item{\code{optional}}{Logical value, whether a length-zero value is allowed.}

\item{\code{length}}{Integer number, the length the value should have.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Integer-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Integer-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{IntegerClass$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
