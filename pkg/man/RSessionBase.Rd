% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/session.R
\name{RSessionBase}
\alias{RSessionBase}
\title{The R Session Base Class}
\description{
An object of this class handles the lower-level communication with
  an R process. Objects of class \code{\link{RKernelSession}} inherit from
  this class.
}
\section{Super classes}{
\code{\link[processx:process]{processx::process}} -> \code{\link[callr:r_session]{callr::r_session}} -> \code{RSessionBase}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{prompt}}{The command prompt}

\item{\code{banner}}{The R startup message used as a session banner in 
the terminal and info box.}

\item{\code{waiting}}{A logical value, whether the R session is waiting 
for input.}

\item{\code{drop_last_input}}{A logical value, whether to drop the echo of
the last input}

\item{\code{last_input}}{A character string, the last input sent to the
R session. Needed to filter out the echo of the input.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RSessionBase-new}{\code{RSessionBase$new()}}
\item \href{#method-RSessionBase-sleeping}{\code{RSessionBase$sleeping()}}
\item \href{#method-RSessionBase-send_input}{\code{RSessionBase$send_input()}}
\item \href{#method-RSessionBase-read_output}{\code{RSessionBase$read_output()}}
\item \href{#method-RSessionBase-receive_output}{\code{RSessionBase$receive_output()}}
\item \href{#method-RSessionBase-receive_all_output}{\code{RSessionBase$receive_all_output()}}
\item \href{#method-RSessionBase-send_receive}{\code{RSessionBase$send_receive()}}
\item \href{#method-RSessionBase-clone}{\code{RSessionBase$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="as_ps_handle"><a href='../../processx/html/process.html#method-process-as_ps_handle'><code>processx::process$as_ps_handle()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="format"><a href='../../processx/html/process.html#method-process-format'><code>processx::process$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_cmdline"><a href='../../processx/html/process.html#method-process-get_cmdline'><code>processx::process$get_cmdline()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_cpu_times"><a href='../../processx/html/process.html#method-process-get_cpu_times'><code>processx::process$get_cpu_times()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_error_connection"><a href='../../processx/html/process.html#method-process-get_error_connection'><code>processx::process$get_error_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_error_file"><a href='../../processx/html/process.html#method-process-get_error_file'><code>processx::process$get_error_file()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_exe"><a href='../../processx/html/process.html#method-process-get_exe'><code>processx::process$get_exe()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_exit_status"><a href='../../processx/html/process.html#method-process-get_exit_status'><code>processx::process$get_exit_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_input_connection"><a href='../../processx/html/process.html#method-process-get_input_connection'><code>processx::process$get_input_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_input_file"><a href='../../processx/html/process.html#method-process-get_input_file'><code>processx::process$get_input_file()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_memory_info"><a href='../../processx/html/process.html#method-process-get_memory_info'><code>processx::process$get_memory_info()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_name"><a href='../../processx/html/process.html#method-process-get_name'><code>processx::process$get_name()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_output_connection"><a href='../../processx/html/process.html#method-process-get_output_connection'><code>processx::process$get_output_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_output_file"><a href='../../processx/html/process.html#method-process-get_output_file'><code>processx::process$get_output_file()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_pid"><a href='../../processx/html/process.html#method-process-get_pid'><code>processx::process$get_pid()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_poll_connection"><a href='../../processx/html/process.html#method-process-get_poll_connection'><code>processx::process$get_poll_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_result"><a href='../../processx/html/process.html#method-process-get_result'><code>processx::process$get_result()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_start_time"><a href='../../processx/html/process.html#method-process-get_start_time'><code>processx::process$get_start_time()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_status"><a href='../../processx/html/process.html#method-process-get_status'><code>processx::process$get_status()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_username"><a href='../../processx/html/process.html#method-process-get_username'><code>processx::process$get_username()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="get_wd"><a href='../../processx/html/process.html#method-process-get_wd'><code>processx::process$get_wd()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="has_error_connection"><a href='../../processx/html/process.html#method-process-has_error_connection'><code>processx::process$has_error_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="has_input_connection"><a href='../../processx/html/process.html#method-process-has_input_connection'><code>processx::process$has_input_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="has_output_connection"><a href='../../processx/html/process.html#method-process-has_output_connection'><code>processx::process$has_output_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="has_poll_connection"><a href='../../processx/html/process.html#method-process-has_poll_connection'><code>processx::process$has_poll_connection()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="interrupt"><a href='../../processx/html/process.html#method-process-interrupt'><code>processx::process$interrupt()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="is_alive"><a href='../../processx/html/process.html#method-process-is_alive'><code>processx::process$is_alive()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="is_incomplete_error"><a href='../../processx/html/process.html#method-process-is_incomplete_error'><code>processx::process$is_incomplete_error()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="is_incomplete_output"><a href='../../processx/html/process.html#method-process-is_incomplete_output'><code>processx::process$is_incomplete_output()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="is_supervised"><a href='../../processx/html/process.html#method-process-is_supervised'><code>processx::process$is_supervised()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="kill"><a href='../../processx/html/process.html#method-process-kill'><code>processx::process$kill()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="kill_tree"><a href='../../processx/html/process.html#method-process-kill_tree'><code>processx::process$kill_tree()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="poll_io"><a href='../../processx/html/process.html#method-process-poll_io'><code>processx::process$poll_io()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="read_all_error"><a href='../../processx/html/process.html#method-process-read_all_error'><code>processx::process$read_all_error()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="read_all_error_lines"><a href='../../processx/html/process.html#method-process-read_all_error_lines'><code>processx::process$read_all_error_lines()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="read_all_output"><a href='../../processx/html/process.html#method-process-read_all_output'><code>processx::process$read_all_output()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="read_all_output_lines"><a href='../../processx/html/process.html#method-process-read_all_output_lines'><code>processx::process$read_all_output_lines()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="read_error"><a href='../../processx/html/process.html#method-process-read_error'><code>processx::process$read_error()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="read_error_lines"><a href='../../processx/html/process.html#method-process-read_error_lines'><code>processx::process$read_error_lines()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="read_output_lines"><a href='../../processx/html/process.html#method-process-read_output_lines'><code>processx::process$read_output_lines()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="resume"><a href='../../processx/html/process.html#method-process-resume'><code>processx::process$resume()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="signal"><a href='../../processx/html/process.html#method-process-signal'><code>processx::process$signal()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="supervise"><a href='../../processx/html/process.html#method-process-supervise'><code>processx::process$supervise()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="suspend"><a href='../../processx/html/process.html#method-process-suspend'><code>processx::process$suspend()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="wait"><a href='../../processx/html/process.html#method-process-wait'><code>processx::process$wait()</code></a></span></li>
<li><span class="pkg-link" data-pkg="processx" data-topic="process" data-id="write_input"><a href='../../processx/html/process.html#method-process-write_input'><code>processx::process$write_input()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="attach"><a href='../../callr/html/r_session.html#method-r_session-attach'><code>callr::r_session$attach()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="call"><a href='../../callr/html/r_session.html#method-r_session-call'><code>callr::r_session$call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="close"><a href='../../callr/html/r_session.html#method-r_session-close'><code>callr::r_session$close()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="debug"><a href='../../callr/html/r_session.html#method-r_session-debug'><code>callr::r_session$debug()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="finalize"><a href='../../callr/html/r_session.html#method-r_session-finalize'><code>callr::r_session$finalize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="get_running_time"><a href='../../callr/html/r_session.html#method-r_session-get_running_time'><code>callr::r_session$get_running_time()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="get_state"><a href='../../callr/html/r_session.html#method-r_session-get_state'><code>callr::r_session$get_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="poll_process"><a href='../../callr/html/r_session.html#method-r_session-poll_process'><code>callr::r_session$poll_process()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="print"><a href='../../callr/html/r_session.html#method-r_session-print'><code>callr::r_session$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="read"><a href='../../callr/html/r_session.html#method-r_session-read'><code>callr::r_session$read()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="run"><a href='../../callr/html/r_session.html#method-r_session-run'><code>callr::r_session$run()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="run_with_output"><a href='../../callr/html/r_session.html#method-r_session-run_with_output'><code>callr::r_session$run_with_output()</code></a></span></li>
<li><span class="pkg-link" data-pkg="callr" data-topic="r_session" data-id="traceback"><a href='../../callr/html/r_session.html#method-r_session-traceback'><code>callr::r_session$traceback()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-new"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-new}{}}}
\subsection{Method \code{new()}}{
Initialize the object and start the session
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$new(
  options = r_session_options(stdout = "|", stderr = "|", cmdargs = c("--interactive",
    "--no-readline", "--no-save", "--no-restore"), env = c(R_CLI_NUM_COLORS =
    "16777216")),
  prompt = "> "
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{options}}{R session objects, see \code{\link[callr]{r_session_options}}.}

\item{\code{prompt}}{The expected prompt string of the R session}

\item{\code{env}}{A character vector with environment variables for the R process}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-sleeping"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-sleeping}{}}}
\subsection{Method \code{sleeping()}}{
Returns a logical value, indicating whether the R process is sleeping.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$sleeping()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-send_input"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-send_input}{}}}
\subsection{Method \code{send_input()}}{
Send input text to the R process
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$send_input(text, drop_echo = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{A character string}

\item{\code{drop_echo}}{A logical value, whether to drop the echo from
stdout.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-read_output"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-read_output}{}}}
\subsection{Method \code{read_output()}}{
Read output from the R session and drop
   input echo if so requested
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$read_output(n = -1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{n}}{The number of characters to read}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-receive_output"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-receive_output}{}}}
\subsection{Method \code{receive_output()}}{
Poll R process for output and read it
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$receive_output(timeout = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timeout}}{A number, the polling timeout in microseconds}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-receive_all_output"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-receive_all_output}{}}}
\subsection{Method \code{receive_all_output()}}{
Receive all output that is available
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$receive_all_output(timeout = 1)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{timeout}}{A number, the polling timeout in microseconds}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-send_receive"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-send_receive}{}}}
\subsection{Method \code{send_receive()}}{
Send text to R process and receive all output from the
   process
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$send_receive(text, timeout = 100, drop_echo = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text}}{A character string}

\item{\code{timeout}}{An integer number, the polling timeout}

\item{\code{drop_echo}}{A logical value, whether to drop the echo from
stdout.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RSessionBase-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RSessionBase-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RSessionBase$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
